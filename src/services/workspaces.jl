include("../AWSCorePrototypeServices.jl")
using .Services: workspaces

"""
Describes the specified WorkSpaces. You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.
"""
DescribeWorkspaces() = workspaces("DescribeWorkspaces")

"""
Modifies the specified WorkSpace properties.

Required Parameters:
WorkspaceId, WorkspaceProperties
"""
ModifyWorkspaceProperties(args) = workspaces("ModifyWorkspaceProperties", args)

"""
Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume. The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original D: Users %USERNAME% user profile folder is renamed to D: Users %USERNAME%MMddyyTHHmmss%.NotMigrated. A new D: Users %USERNAME%  folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile. For available migration scenarios, details about what happens during migration, and best practices, see Migrate a WorkSpace.

Required Parameters:
SourceWorkspaceId, BundleId
"""
MigrateWorkspace(args) = workspaces("MigrateWorkspace", args)

"""
Sets the state of the specified WorkSpace. To maintain a WorkSpace without being interrupted, set the WorkSpace state to ADMIN_MAINTENANCE. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the ADMIN_MAINTENANCE state.

Required Parameters:
WorkspaceId, WorkspaceState
"""
ModifyWorkspaceState(args) = workspaces("ModifyWorkspaceState", args)

"""
Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described. 
"""
DescribeWorkspaceImages() = workspaces("DescribeWorkspaceImages")

"""
Restores the specified WorkSpace to its last known healthy state. You cannot restore a WorkSpace unless its state is  AVAILABLE, ERROR, UNHEALTHY, or STOPPED. Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Restore a WorkSpace. This operation is asynchronous and returns before the WorkSpace is completely restored.

Required Parameters:
WorkspaceId
"""
RestoreWorkspace(args) = workspaces("RestoreWorkspace", args)

"""
Creates one or more WorkSpaces. This operation is asynchronous and returns before the WorkSpaces are created.

Required Parameters:
Workspaces
"""
CreateWorkspaces(args) = workspaces("CreateWorkspaces", args)

"""
Rebuilds the specified WorkSpace. You cannot rebuild a WorkSpace unless its state is AVAILABLE, ERROR, UNHEALTHY, or STOPPED. Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Rebuild a WorkSpace. This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.

Required Parameters:
RebuildWorkspaceRequests
"""
RebuildWorkspaces(args) = workspaces("RebuildWorkspaces", args)

"""
Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL).  The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.

Required Parameters:
ManagementCidrRangeConstraint
"""
ListAvailableManagementCidrRanges(args) = workspaces("ListAvailableManagementCidrRanges", args)

"""
Reboots the specified WorkSpaces. You cannot reboot a WorkSpace unless its state is AVAILABLE or UNHEALTHY. This operation is asynchronous and returns before the WorkSpaces have rebooted.

Required Parameters:
RebootWorkspaceRequests
"""
RebootWorkspaces(args) = workspaces("RebootWorkspaces", args)

"""
Adds one or more rules to the specified IP access control group. This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.

Required Parameters:
GroupId, UserRules
"""
AuthorizeIpRules(args) = workspaces("AuthorizeIpRules", args)

"""
Disassociates the specified IP access control group from the specified directory.

Required Parameters:
DirectoryId, GroupIds
"""
DisassociateIpGroups(args) = workspaces("DisassociateIpGroups", args)

"""
Retrieves a list that describes the available WorkSpace bundles. You can filter the results using either bundle ID or owner, but not both.
"""
DescribeWorkspaceBundles() = workspaces("DescribeWorkspaceBundles")

"""
Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
"""
DescribeAccountModifications() = workspaces("DescribeAccountModifications")

"""
Retrieves a list that describes one or more specified Amazon WorkSpaces clients.

Required Parameters:
ResourceIds
"""
DescribeClientProperties(args) = workspaces("DescribeClientProperties", args)

"""
Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.

Required Parameters:
DirectoryId
"""
DeregisterWorkspaceDirectory(args) = workspaces("DeregisterWorkspaceDirectory", args)

"""
Modify the default properties used to create WorkSpaces.

Required Parameters:
ResourceId, WorkspaceCreationProperties
"""
ModifyWorkspaceCreationProperties(args) = workspaces("ModifyWorkspaceCreationProperties", args)

"""
Starts the specified WorkSpaces. You cannot start a WorkSpace unless it has a running mode of AutoStop and a state of STOPPED.

Required Parameters:
StartWorkspaceRequests
"""
StartWorkspaces(args) = workspaces("StartWorkspaces", args)

"""
Describes the specified tags for the specified WorkSpaces resource.

Required Parameters:
ResourceId
"""
DescribeTags(args) = workspaces("DescribeTags", args)

"""
 Stops the specified WorkSpaces. You cannot stop a WorkSpace unless it has a running mode of AutoStop and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.

Required Parameters:
StopWorkspaceRequests
"""
StopWorkspaces(args) = workspaces("StopWorkspaces", args)

"""
Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
"""
DescribeAccount() = workspaces("DescribeAccount")

"""
Removes one or more rules from the specified IP access control group.

Required Parameters:
GroupId, UserRules
"""
RevokeIpRules(args) = workspaces("RevokeIpRules", args)

"""
Copies the specified image from the specified Region to the current Region.

Required Parameters:
Name, SourceImageId, SourceRegion
"""
CopyWorkspaceImage(args) = workspaces("CopyWorkspaceImage", args)

"""
Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
"""
ModifyAccount() = workspaces("ModifyAccount")

"""
Deletes the specified IP access control group. You cannot delete an IP access control group that is associated with a directory.

Required Parameters:
GroupId
"""
DeleteIpGroup(args) = workspaces("DeleteIpGroup", args)

"""
Modifies the self-service WorkSpace management capabilities for your users. For more information, see Enable Self-Service WorkSpace Management Capabilities for Your Users.

Required Parameters:
ResourceId, SelfservicePermissions
"""
ModifySelfservicePermissions(args) = workspaces("ModifySelfservicePermissions", args)

"""
Modifies the properties of the specified Amazon WorkSpaces clients.

Required Parameters:
ResourceId, ClientProperties
"""
ModifyClientProperties(args) = workspaces("ModifyClientProperties", args)

"""
Replaces the current rules of the specified IP access control group with the specified rules.

Required Parameters:
GroupId, UserRules
"""
UpdateRulesOfIpGroup(args) = workspaces("UpdateRulesOfIpGroup", args)

"""
Describes the snapshots for the specified WorkSpace.

Required Parameters:
WorkspaceId
"""
DescribeWorkspaceSnapshots(args) = workspaces("DescribeWorkspaceSnapshots", args)

"""
Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see  Creating the workspaces_DefaultRole Role.

Required Parameters:
DirectoryId, EnableWorkDocs
"""
RegisterWorkspaceDirectory(args) = workspaces("RegisterWorkspaceDirectory", args)

"""
Deletes the specified tags from the specified WorkSpaces resource.

Required Parameters:
ResourceId, TagKeys
"""
DeleteTags(args) = workspaces("DeleteTags", args)

"""
Describes one or more of your IP access control groups.
"""
DescribeIpGroups() = workspaces("DescribeIpGroups")

"""
Associates the specified IP access control group with the specified directory.

Required Parameters:
DirectoryId, GroupIds
"""
AssociateIpGroups(args) = workspaces("AssociateIpGroups", args)

"""
Describes the connection status of the specified WorkSpaces.
"""
DescribeWorkspacesConnectionStatus() = workspaces("DescribeWorkspacesConnectionStatus")

"""
Terminates the specified WorkSpaces. Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact Amazon Web Services before terminating the WorkSpace. You can terminate a WorkSpace that is in any state except SUSPENDED. This operation is asynchronous and returns before the WorkSpaces have been completely terminated.

Required Parameters:
TerminateWorkspaceRequests
"""
TerminateWorkspaces(args) = workspaces("TerminateWorkspaces", args)

"""
Creates the specified tags for the specified WorkSpaces resource.

Required Parameters:
ResourceId, Tags
"""
CreateTags(args) = workspaces("CreateTags", args)

"""
Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see  Control Device Access.

Required Parameters:
ResourceId, WorkspaceAccessProperties
"""
ModifyWorkspaceAccessProperties(args) = workspaces("ModifyWorkspaceAccessProperties", args)

"""
Creates an IP access control group. An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using AuthorizeIpRules. There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.

Required Parameters:
GroupName
"""
CreateIpGroup(args) = workspaces("CreateIpGroup", args)

"""
Describes the available directories that are registered with Amazon WorkSpaces.
"""
DescribeWorkspaceDirectories() = workspaces("DescribeWorkspaceDirectories")

"""
Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and un-share the image if it is shared with other accounts. 

Required Parameters:
ImageId
"""
DeleteWorkspaceImage(args) = workspaces("DeleteWorkspaceImage", args)

"""
Imports the specified Windows 7 or Windows 10 Bring Your Own License (BYOL) image into Amazon WorkSpaces. The image must be an already licensed EC2 image that is in your AWS account, and you must own the image. 

Required Parameters:
Ec2ImageId, IngestionProcess, ImageName, ImageDescription
"""
ImportWorkspaceImage(args) = workspaces("ImportWorkspaceImage", args)
